= DM::Is::Markup


== Kematzy::ActiveRecord::ActsAsTextiled

=== Description

Inspired by the +acts_as_textiled+ plugin by <b>Chris Wanstrath</b>. 

This simple plugin allows you to forget about constantly rendering Textile in your 
application.  Instead, you can rest easy knowing the Textile fields you want to display
as HTML will always be displayed as HTML (unless you tell your code otherwise).


=== Usage

No database modifications are needed.

(1) Ensure you have RedCloth installed.

    sudo gem install RedCloth


(2) Open your model and add the following to it:

      kematzy_acts_as_textiled  :field_names as array


(3) Now you can interact with your models in the following way:

   @model = ModelName.new()
   
   class Article < ActiveRecord::Base
     kematzy_acts_as_textiled :body_text, :description
   end
   
   >> story = Article.find(3)
   => #<Article:0x245fed8 ... >
   
   >> story.description
   => "<p>This is <strong>cool</strong>.</p>"
   
   >> story.description(:source)
   => "This is *cool*."
   
   >> story.description(:plain)
   => "This is cool."
   
   >> story.description = "I _know_!"
   => "I _know_!"
   
   >> story.save
   => true
   
   >> story.description
   => "<p>I <em>know</em>!</p>"
   
   >> story.textilized = false
   => false
   
   >> story.description
   => "I _know_!"
   
   >> story.textilized = true
   => true
   
   >> story.description
   => "<p>I <em>know</em>!</p>"

=== Different Modes

RedCloth supports different modes, such as :lite_mode.  To use a mode on 
a specific attribute simply pass it in as an options hash after any
attributes you don't want to mode-ify.  Like so:

  class Article < ActiveRecord::Base
    kematzy_acts_as_textiled :body_text, :description => :lite_mode
  end

Or:

  class Article < ActiveRecord::Base
    kematzy_acts_as_textiled :body_text => :lite_mode, :description => :lite_mode
  end

You can also pass in multiple modes per attribute:

  class Article < ActiveRecord::Base
    kematzy_acts_as_textiled :body_text, :description => [ :lite_mode, :no_span_caps ]
  end

Get it?  Now let's say you have an admin tool and you want the text to be displayed
in the text boxes / fields as plaintext.  Do you have to change all your views?  

Hell no.

=== form_for

Are you using form_for?  If you are, you don't have to change any code at all.

  <% form_for :story, @story do |f| %>
    Description: <br/> <%= f.text_field :description %>
  <% end %>

You'll see the Textile plaintext in the text field.  It Just Works.

=== form tags

If you're being a bit unconventional, no worries.  You can still get at your 
raw Textile like so:

  Description: <br/> <%= text_field_tag :description, @story.description(:source) %>

And there's always object.textilized = false, as demo'd above.

=== Pre-fetching

acts_as_textiled locally caches rendered HTML once the attribute in question has 
been requested.  Obviously this doesn't bode well for marshalling or caching.

If you need to force your object to build and cache HTML for all textiled attributes,
call the +textilize+ method on your object.

If you're real crazy you can even do something like this:

  class Article < ActiveRecord::Base
    kematzy_acts_as_textiled :body_text, :description

    def after_find
      textilize
    end
  end

All your Textile will now be ready to go in spiffy HTML format.  But you probably
won't need to do this.


=== Examples

In a Blog/Publishing scenario you could use it like this:

  class Article < ActiveRecord::Base
    kematzy_acts_as_textiled :body
  end

Whereas in another unique scenario - like in Restaurant model - you could use it like this:

  class MenuItem < ActiveRecord::Base
    kematzy_acts_as_textiled :description => :lite_mode
  end



=== Related

Based on the original version created by Chris Wanstrath [ chris[at]ozmm[dot]org ]

=== Credits

Copyright (c) 2008-05-07 [Kematzy at gmail]

Copyright (c) 2006 Chris Wanstrath [ chris[at]ozmm[dot]org ]


=== Licence

Released under the MIT license.

Copyright (c) 2008-05-07 [Kematzy at gmail]
Copyright (c) 2006 Chris Wanstrath

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

